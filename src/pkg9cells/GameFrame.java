/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pkg9cells;

import java.util.*;
import javax.swing.ImageIcon;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.swing.JLabel;
/**
 *
 * @author Alphatron99
 */
public class GameFrame extends javax.swing.JFrame {

    /**
     * Creates new form GameFrame
     */
    public GameFrame() {
        initComponents();
        try
        {
        AudioInputStream audioIn = AudioSystem.getAudioInputStream(getClass().getClassLoader().getResource("res/With_love.wav"));
        clip = AudioSystem.getClip();
        clip.open(audioIn);
        clip.loop(Clip.LOOP_CONTINUOUSLY);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    int difficulty=1;
    Clip clip;
    AIplayer aip;
    public GameFrame(int diff,int avatar,String nm)
    {
        setContentPane(new JLabel(new ImageIcon(getClass().getClassLoader().getResource("res/bg4.jpg"))));
        initComponents();
        lblp.setText(nm);
        difficulty=diff;
        imgp.setIcon(new ImageIcon(getClass().getClassLoader().getResource("res/av"+avatar+".jpg")));
        imga.setIcon(new ImageIcon(getClass().getClassLoader().getResource("res/dax"+diff+".jpg")));
        if(diff==1)
        {
            lbla.setText("Easy Dexter");
        }
        else if(diff==2)
        {
            lbla.setText("Sleazy Dexter");
        }
        else if(diff==3)
        {
            lbla.setText("Crazy Dexter");
        }
        aip=new AIplayer(difficulty);

         try
        {
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(getClass().getClassLoader().getResource("res/With_love.wav"));
            clip = AudioSystem.getClip();
            clip.open(audioIn);
            clip.loop(Clip.LOOP_CONTINUOUSLY);
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gPanel = new javax.swing.JPanel();
        b1 = new javax.swing.JButton();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        b4 = new javax.swing.JButton();
        b5 = new javax.swing.JButton();
        b6 = new javax.swing.JButton();
        b7 = new javax.swing.JButton();
        b8 = new javax.swing.JButton();
        b9 = new javax.swing.JButton();
        imga = new javax.swing.JLabel();
        imgp = new javax.swing.JLabel();
        lbla = new javax.swing.JLabel();
        lblp = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Game Time!!!");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        gPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));

        b1.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        b2.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        b4.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b5.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        b6.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b6ActionPerformed(evt);
            }
        });

        b7.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b7ActionPerformed(evt);
            }
        });

        b8.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b8ActionPerformed(evt);
            }
        });

        b9.setFont(new java.awt.Font("DialogInput", 1, 30)); // NOI18N
        b9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gPanelLayout = new javax.swing.GroupLayout(gPanel);
        gPanel.setLayout(gPanelLayout);
        gPanelLayout.setHorizontalGroup(
            gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gPanelLayout.createSequentialGroup()
                        .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gPanelLayout.createSequentialGroup()
                        .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(gPanelLayout.createSequentialGroup()
                        .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        gPanelLayout.setVerticalGroup(
            gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b3, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b2, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b1, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b4, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b5, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b6, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b7, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b8, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(b9, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lbla.setFont(new java.awt.Font("Book Antiqua", 1, 34)); // NOI18N
        lbla.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        lblp.setFont(new java.awt.Font("Book Antiqua", 1, 34)); // NOI18N
        lblp.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jButton1.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jButton1.setText("Play Again");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("DialogInput", 1, 18)); // NOI18N
        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbla, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(imga, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(50, 50, 50)
                .addComponent(gPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 22, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton1)
                            .addComponent(imgp, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblp, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbla, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(gPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imgp, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(imga, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    boolean notOver=true;
    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
        // TODO add your handling code here:
        if(b1.getText().equals(""))
        {
        cells.insert(new int[]{0,0},Cell.OpSeed);
        b1.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
        // TODO add your handling code here:
        if(b2.getText().equals(""))
        {
        cells.insert(new int[]{0,1},Cell.OpSeed);
        b2.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b2ActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
        // TODO add your handling code here:
        if(b3.getText().equals(""))
        {
        cells.insert(new int[]{0,2},Cell.OpSeed);
        b3.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b3ActionPerformed

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
        // TODO add your handling code here:
        if(b4.getText().equals(""))
        {
        cells.insert(new int[]{1,0},Cell.OpSeed);
        b4.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b4ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        // TODO add your handling code here:
        if(b5.getText().equals(""))
        {
        cells.insert(new int[]{1,1},Cell.OpSeed);
        b5.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b5ActionPerformed

    private void b6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b6ActionPerformed
        // TODO add your handling code here:
        if(b6.getText().equals(""))
        {
        cells.insert(new int[]{1,2},Cell.OpSeed);
        b6.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b6ActionPerformed

    private void b7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b7ActionPerformed
        // TODO add your handling code here:
        if(b7.getText().equals(""))
        {
        cells.insert(new int[]{2,0},Cell.OpSeed);
        b7.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b7ActionPerformed

    private void b8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b8ActionPerformed
        // TODO add your handling code here:
    if(b8.getText().equals(""))    
    {    
        cells.insert(new int[]{2,1},Cell.OpSeed);
        b8.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
    }
    }//GEN-LAST:event_b8ActionPerformed

    private void b9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b9ActionPerformed
        // TODO add your handling code here:
        if(b9.getText().equals(""))
        {
        cells.insert(new int[]{2,2},Cell.OpSeed);
        b9.setText("O");
        gPanelsetEnabled(false);
        ResultDeclare();
        if(notOver)
        {
        aip.play();
        gPanelsetEnabled(true);
        ResultDeclare();
        }
        }
    }//GEN-LAST:event_b9ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        clip.stop();
    }//GEN-LAST:event_formWindowClosing

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        PlayMenu pm=new PlayMenu();
        pm.setLocationRelativeTo(this);
        pm.setVisible(true);
        clip.stop();
        this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed
    Cell cells=new Cell();
    void gPanelsetEnabled(boolean b)
    {
        b1.setEnabled(b);
        b2.setEnabled(b);
        b3.setEnabled(b);
        b4.setEnabled(b);
        b5.setEnabled(b);
        b6.setEnabled(b);
        b7.setEnabled(b);
        b8.setEnabled(b);
        b9.setEnabled(b);
    }
    void ResultDeclare()
    {
        boolean tie=true;
        for(int i=0;i<3;i++)
        {
            for(int j=0;j<3;j++)
            {
                if(cells.isEmpty(i, j))
                {
                    tie=false;
                }
            }
        }
        if(cells.hasWon(Cell.AISeed))
        {
            lbla.setText("WINNER");
            lblp.setText("LOSER");
            clip.close();
            playNote();
            gPanelsetEnabled(false);
            notOver=false;
        }
        else if(cells.hasWon(Cell.OpSeed))
        {
            lbla.setText("LOSER");
            lblp.setText("WINNER");
            clip.close();
            playNote();
            gPanelsetEnabled(false);
            notOver=false;
        }
        else if(tie)
        {
            lbla.setText("DRAW");
            lblp.setText("DRAW");
            clip.close();
            playNote();
            gPanelsetEnabled(false);
            notOver=false;
        }
    }
    void playNote()
    {
        Clip cp;
        try
        {
            AudioInputStream audioIn = AudioSystem.getAudioInputStream(getClass().getClassLoader().getResource("res/Victory.wav"));
            cp = AudioSystem.getClip();
            cp.open(audioIn);
            cp.start();
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }
    void link(int[] c)
    {
        String marker="X";
        if (c[0]==0)
        {
            if(c[1]==0)
            {
                b1.setText(marker);
            }
            else if(c[1]==1)
            {
                b2.setText(marker);
            }
            else
            {
                b3.setText(marker);
            }
        }
        else if (c[0]==1)
        {
            if(c[1]==0)
            {
                b4.setText(marker);
            }
            else if(c[1]==1)
            {
                b5.setText(marker);
            }
            else
            {
                b6.setText(marker);
            }
        }
        else if (c[0]==2)
        {
            if(c[1]==0)
            {
                b7.setText(marker);
            }
            else if(c[1]==1)
            {
                b8.setText(marker);
            }
            else
            {
                b9.setText(marker);
            }
        }
    }
    class AIplayer
    {
        int diff;
        boolean firstChance=true;
        AIplayer()
        {
            
        }
        AIplayer(int d)
        {
            diff=d;
        }
        int Evaluate()
        {
            int score=0;
            score+=cells.EvaluateLine(0,0,1,0,2,0);
            score+=cells.EvaluateLine(0,1,1,1,2,1);
            score+=cells.EvaluateLine(0,2,1,2,2,2);
            score+=cells.EvaluateLine(0,0,0,1,0,2);
            score+=cells.EvaluateLine(1,0,1,1,1,2);
            score+=cells.EvaluateLine(2,0,2,1,2,2);
            score+=cells.EvaluateLine(0,0,1,1,2,2);
            score+=cells.EvaluateLine(2,0,1,1,0,2);
            return score;
        }
        List<int[]> GenerateMoves()
        {
            List<int[]> mov=new ArrayList<>();
            if(cells.hasWon(Cell.AISeed)||cells.hasWon(Cell.OpSeed))
            {
                return mov;
            }
            for(int i=0;i<3;i++)
            {
                for(int j=0;j<3;j++)
                {
                    if(cells.isEmpty(i, j))
                    {
                        mov.add(new int[]{i,j});
                    }
                }
            }
            return mov;
        }
        int[] MiniMax(int player,int depth)
        {
            List<int[]> Moves=GenerateMoves();
            int bestScore=(player==Cell.AISeed)?Integer.MIN_VALUE:Integer.MAX_VALUE;
            int bestRow=-1;
            int bestCol=-1;
            if(Moves.isEmpty()||depth==0)
            {
                bestScore=Evaluate();
            }
            for(int[] mv : Moves)
            {
                cells.insert(mv, player);
                if(player==Cell.AISeed)
                {
                    int currentScore=MiniMax(Cell.OpSeed,depth-1)[0];
                    if(currentScore>bestScore)
                    {
                        bestScore=currentScore;
                        bestRow=mv[0];
                        bestCol=mv[1];
                    }
                }
                else if(player==Cell.OpSeed)
                {
                    int currentScore=MiniMax(Cell.AISeed,depth-1)[0];
                    if(currentScore<bestScore)
                    {
                        bestScore=currentScore;
                        bestRow=mv[0];
                        bestCol=mv[1];
                    }
                }
                cells.insert(mv,0);
            }
            return new int[]{bestScore,bestRow,bestCol};
        }
        void play()
        {
            if(diff==1)
            {
                if(firstChance)
                {
                    int i=0;
                    Random gen=new Random();
                    while(i==0)
                    {
                        int r=gen.nextInt(3);
                        int c=gen.nextInt(3);
                        if(cells.isEmpty(r, c))
                        {
                            cells.insert(new int[] {r,c}, Cell.AISeed);
                            link(new int[]{r,c});
                            i=1;
                        }
                    }
                    firstChance=false;
                }
                else
                {
                    int[] Result=MiniMax(Cell.AISeed,1);
                    int[] usage=new int[]{Result[1],Result[2]};
                    cells.insert(usage,Cell.AISeed);
                    link(usage);
                }
            }
            else if(diff==2)
            {
                if(firstChance)
                {
                    int i=0;
                    Random gen=new Random();
                    while(i==0)
                    {
                        int r=gen.nextInt(3);
                        int c=gen.nextInt(3);
                        if(cells.isEmpty(r, c))
                        {
                            cells.insert(new int[] {r,c}, Cell.AISeed);
                            link(new int[]{r,c});
                            i=1;
                        }
                    }
                    firstChance=false;
                }
                else
                {
                    int[] Result=MiniMax(Cell.AISeed,3);
                    int[] usage=new int[]{Result[1],Result[2]};
                    cells.insert(usage,Cell.AISeed);
                    link(usage);
                }
            }
            else if(diff==3)
            {
                int[] Result=MiniMax(Cell.AISeed,6);
                int[] usage=new int[]{Result[1],Result[2]};
                cells.insert(usage,Cell.AISeed);
                System.out.println(diff);
                link(usage);
            }
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JButton b6;
    private javax.swing.JButton b7;
    private javax.swing.JButton b8;
    private javax.swing.JButton b9;
    private javax.swing.JPanel gPanel;
    private javax.swing.JLabel imga;
    private javax.swing.JLabel imgp;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel lbla;
    private javax.swing.JLabel lblp;
    // End of variables declaration//GEN-END:variables
}
